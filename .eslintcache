[{"D:\\Work\\TDDInterview\\src\\index.tsx":"1","D:\\Work\\TDDInterview\\src\\App.tsx":"2","D:\\Work\\TDDInterview\\src\\reportWebVitals.ts":"3","D:\\Work\\TDDInterview\\src\\Helper.ts":"4","D:\\Work\\TDDInterview\\src\\solution\\HelperSolution.ts":"5"},{"size":517,"mtime":1643924132156,"results":"6","hashOfConfig":"7"},{"size":1049,"mtime":1643943420480,"results":"8","hashOfConfig":"7"},{"size":440,"mtime":1643924365004,"results":"9","hashOfConfig":"7"},{"size":360,"mtime":1643924132155,"results":"10","hashOfConfig":"7"},{"size":1230,"mtime":1643943254470,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1wm27pv",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},"D:\\Work\\TDDInterview\\src\\index.tsx",[],["25","26"],"D:\\Work\\TDDInterview\\src\\App.tsx",[],"D:\\Work\\TDDInterview\\src\\reportWebVitals.ts",[],"D:\\Work\\TDDInterview\\src\\Helper.ts",[],["27","28"],"D:\\Work\\TDDInterview\\src\\solution\\HelperSolution.ts",["29"],"export function encypher(codePhrase: string) {\r\n  const unEncryptedCharacters = Array.from(codePhrase);\r\n  let encryptedCharacters = new Array(20);\r\n  let lastCharP = false;\r\n  let changeThisCharToL: number = NaN;\r\n  let alreadyAnE = false;\r\n  let alreadyAT = false;\r\n  unEncryptedCharacters.forEach((character, index) => {\r\n    //r to n\r\n    if (character === \"r\") character = \"n\";\r\n\r\n    //s to a\r\n    if (character === \"s\") character = \"a\";\r\n\r\n    //delete e after first instance\r\n    if (character === \"e\") {\r\n      if (alreadyAnE === true) {\r\n        character = \"\";\r\n      } else {\r\n        alreadyAnE = true;\r\n      }\r\n    }\r\n\r\n    //change t to m after first instance\r\n    if (character === \"t\") {\r\n      if (alreadyAT === true) {\r\n        character = \"m\";\r\n      } else {\r\n        alreadyAT = true;\r\n      }\r\n    }\r\n\r\n    //change ph to lo\r\n    if (lastCharP && character === \"h\") {\r\n      character = \"o\";\r\n      changeThisCharToL = index - 1;\r\n    }\r\n    if (character === \"p\") lastCharP = true;\r\n    else lastCharP = false;\r\n\r\n    //reassign\r\n    encryptedCharacters[index] = character;\r\n  });\r\n  if (changeThisCharToL !== NaN) encryptedCharacters[changeThisCharToL] = \"l\";\r\n  return encryptedCharacters.join(\"\");\r\n}\r\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"30","replacedBy":"34"},{"ruleId":"32","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":44,"column":7,"nodeType":"38","messageId":"39","endLine":44,"endColumn":32},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],["40"],["41"],"use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","no-global-assign","no-unsafe-negation"]